// <auto-generated />
using CarQuest.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarQuest.Migrations
{
    [DbContext(typeof(CustomerContext))]
    partial class CustomerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarQuest.Models.CarInventory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CarInventories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CustomerID = 1,
                            Make = "Toyota",
                            Model = "Camry",
                            Year = 2020
                        },
                        new
                        {
                            ID = 2,
                            CustomerID = 2,
                            Make = "Honda",
                            Model = "Civic",
                            Year = 2021
                        });
                });

            modelBuilder.Entity("CarQuest.Models.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Cell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("GenderIdentity")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Email = "abc@xyz.edu",
                            FirstName = "John",
                            LastName = "Doe"
                        },
                        new
                        {
                            ID = 2,
                            Email = "emma@stone.com",
                            FirstName = "Emma",
                            LastName = "Stone"
                        },
                        new
                        {
                            ID = 3,
                            Email = "chris@evans.com",
                            FirstName = "Chris",
                            LastName = "Evans"
                        },
                        new
                        {
                            ID = 4,
                            Email = "scarlett@johansson.com",
                            FirstName = "Scarlett",
                            LastName = "Johansson"
                        },
                        new
                        {
                            ID = 5,
                            Email = "robert@downey.com",
                            FirstName = "Robert",
                            LastName = "Downey Jr."
                        },
                        new
                        {
                            ID = 6,
                            Email = "natalie@portman.com",
                            FirstName = "Natalie",
                            LastName = "Portman"
                        },
                        new
                        {
                            ID = 7,
                            Email = "harrison@ford.com",
                            FirstName = "Harrison",
                            LastName = "Ford"
                        },
                        new
                        {
                            ID = 8,
                            Email = "denzel@washington.com",
                            FirstName = "Denzel",
                            LastName = "Washington"
                        },
                        new
                        {
                            ID = 9,
                            Email = "leonardo@dicaprio.com",
                            FirstName = "Leonardo",
                            LastName = "DiCaprio"
                        });
                });

            modelBuilder.Entity("CarQuest.Models.CarInventory", b =>
                {
                    b.HasOne("CarQuest.Models.Customer", "Customer")
                        .WithMany("CarInventories")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CarQuest.Models.Customer", b =>
                {
                    b.Navigation("CarInventories");
                });
#pragma warning restore 612, 618
        }
    }
}
